package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"facebook/graph/model"
	"facebook/models"
	"fmt"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.UserInput) (*models.User, error) {
	panic(fmt.Errorf("not implemented: CreateUser - createUser"))
}

// FollowUser is the resolver for the followUser field.
func (r *mutationResolver) FollowUser(ctx context.Context, id string) (*models.User, error) {
	panic(fmt.Errorf("not implemented: FollowUser - followUser"))
}

// UnfollowUser is the resolver for the unfollowUser field.
func (r *mutationResolver) UnfollowUser(ctx context.Context, id string) (*models.User, error) {
	panic(fmt.Errorf("not implemented: UnfollowUser - unfollowUser"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*models.User, error) {
	return r.API.Users(ctx)
}

// Following is the resolver for the following field.
func (r *userResolver) Following(ctx context.Context, obj *models.User) ([]*models.User, error) {
	// for current user get following
	return r.API.Following(ctx, obj)
}

// Followers is the resolver for the followers field.
func (r *userResolver) Followers(ctx context.Context, obj *models.User) ([]*models.User, error) {
	return r.API.Followers(ctx, obj)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
