Transaction

single piece of work
Begin Tx

Commit Tx

ACID Property in RDBMS
Atomicity, Consistency, Isolation and Durability

Collection of queries

Eg. Account Deposit - select update update

Atomicity
All queries must succeed. if one fails all should rollback.

Isolation
Can my inflight transaction see changes made by other transactions ?
get Read Phenomena because of lack of isolation ( dirty read and all that )
Isolation Levels

Isolation Read Phenomena
1. Dirty Reads ( if another tx made changes but later it rollbacked hence i read dirty data )
2. Non repeatable reads ( I read my value and then i read again and i didn't get same result )
3. Phantom Reads (You can not control new entries to be inserted ha ha)
4. Lost updates ( when you change something  and some other tx overwrote your data before you commit ). Hence your change is lost.

Dirty Reads
read data in TX1
then in TX2 someone updated that data
then read again in TX1 hence dirty read

Non repeatable read
May be we are reading twice the same value
read in TX1 then write in TX2
and commit in TX2
THen read in TX1

Here read is legit read but it is not same as previous read and hence producing non repeatable read.

Phantom Read
TX1 - read
TX2 - Inserted data
TX1 - select. - you are getting extra rows of data. This is little bit hard to avoid it. one of the way is serialization.

Isolation Levels 
Levels that are implemented by dbms to fix those phenomena.

1. Read Uncommited
- No isolation, any changes from the outside is visible to the transaction

2. Read commited // most time it is one of the best
- Each query in transaction only sees commited stuff

3. Repeatable Read
- Each quer in tx only sees commited updates at the beginning of tx
We can also add exclusive lock. No body can write if i am read. shared lock.
if anybody want to access then give it to them.

4. Serializable
- tx are serialised. Each tx has to be serializable.
- Easiest but slowest.

Most of this things are done at application level and we do it.
Serializable me to koi problem hi nahi he.

Performence goes down from 1 to 4.


CONSISTENCY 
- Atomicity and isolation leads to consistency in database

1. Consistency in data
2. Consistency in reads

Consistency in data, Defined by
- Defined by user
- Referential integrety ( foreign key )
- Atomicity 
- Isolation

lack of atomicity can lead in inconsitency in data.
We can adjust performance, inconsistency and so on and we have to think about every single aspect of software engineering.
What can we give up software engineering.

For eg. youtube gives approx number of subscribers. because they focus on performance over consistency.

---
Consisteny In Read

It is very interesting.
1. if tx is commited a change will a new tx immediatly see the changee ?
2. Relational and NoSql database suffer from this
3. Eventual consistency

If we have server then -> No problem.

We can add replicas of database and now we can do horizontal scaling. THEN we will become inconsistent eventually. Until primary node ask secondary node to update the data, till then someone will have read from secondary node then it will produce inconsistency.

Are you happy with this old value ?? if it is about subscribers then there is no problem ha ha.

as if we are reading from different replicas then we all will read different things.

Sharding and all that. for scalling see it.



TODO :Transaction Complete from Hussain
TODO :Normalization ( all techniques )
TODO :Postgresql SQL commands
TODO : https://www.youtube.com/watch?v=nuBi2XbHH18 Row level locks



